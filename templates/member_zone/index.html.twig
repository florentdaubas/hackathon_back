{% extends 'base-membre.html.twig' %}

{% block main %}
<div class="container">
  <div class="row mt-3">
    <div class="col-sm-4">
      <h6>Bienvenue dans votre espace membre!</h6>
    </div>
    <div class="col-sm-4 text-left">
      <span class="btn btn-outline-success btn-sm">{{ app.user.username }}</span>
    </div>
    <div class="col-sm-4 text-right">
      <a class="btn btn-primary btn-sm" href="{{ path('new-info') }}">Publier une info</a>
      <a class="btn btn-primary btn-sm" href="{{ path('member-message') }}">Vos messages</a>
    </div>
  </div>

  <div class="row mt-3">
    <div class="col-sm-12">
      <div id="accordion">
        <div class="card">
          <div class="card-header" id="headingOne">
            <h5 class="mb-0">
              <button class="btn btn-link" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true"
                aria-controls="collapseOne">
                Votre profil
              </button>
              <a class="btn btn-primary btn-sm" href="{{ path('member-edit') }}"><button class="btn" title="Editer"><i class="fa fa-pen"></i></button></a>
            </h5>
          </div>

          <div id="collapseOne" class="collapse" aria-labelledby="headingOne" data-parent="#accordion">
            <div class="card-body">
              <ul class="list-group">
                <li class="list-group-item"><strong>Pseudo : </strong>{{app.user.username}}</li>
                <li class="list-group-item"><strong>Photo du profil : </strong>
                  {% if not member.url %}
                  <img src="{{ asset ('assets/img/user.jpg') }}" height="100" width="100" />
                  {% else %}
                  <img src="{{ asset ('assets/mini-'~member.url) }}" height="100" width="100" />
                  {% endif %}</li>
                <li class="list-group-item"><strong>Adresse email : </strong>{{app.user.email}}</li>
                <li class="list-group-item"><strong>Description : </strong>{{app.user.description}}</li>
                {# <li class="list-group-item">Porta ac consectetur ac</li>
                <li class="list-group-item">Vestibulum at eros</li> #}
              </ul>



            </div>
          </div>
        </div>

        <div class="card">
          <div class="card-header" id="headingGroup">
            <h5 class="mb-0">
              <button class="btn btn-link" data-toggle="collapse" data-target="#collapseGroup" aria-expanded="true"
                aria-controls="collapseGroup">
                Groupes Privés
              </button>
            </h5>
          </div>

          <div id="collapseGroup" class="collapse" aria-labelledby="headingGroup" data-parent="#accordion">
            <div class="card-body">
              {% if listPrivateGroups is not empty %}
                  {% for privateGroup in listPrivateGroups %}
                      <div class="d-flex">
                          <span class="mr-3">{{ privateGroup.name }}</span>
                          <span>({{ privateGroup.role }})</span>
                          {% if privateGroup.join_status is empty %}
                            <form action="{{ path('member_private_group_remove_member') }}" method="post">
                              <input type="hidden" name="privateGroupId" value="{{ privateGroup.private_group_id }}">
                              <input type="hidden" name="memberId" value="{{ app.user.id }}">
                              <input class="btn btn-warning btn-sm" type="submit" value="Quitter ce groupe">
                            </form>
                            {% if privateGroup.role == "GROUP_ADMIN" %}
                                <form action="{{ path('member_private_group_invite') }}" method="post">
                                    <input type="hidden" name="privateGroupId" value="{{ privateGroup.private_group_id }}">
                                    <input class="btn btn-success btn-sm" type="submit" value="Inviter un membre dans ce groupe">
                                </form>
                                
                                {% if privateGroup.nb_join is not null %}
                                  <form action="{{ path('member_private_group_accept_join') }}" method="post">
                                      <input type="hidden" name="privateGroupId" value="{{ privateGroup.private_group_id }}">
                                      <input class="btn btn-info btn-sm" type="submit" value="Gérer les demandes à rejoindre ce groupe">
                                  </form>
                                {% endif %}

                                <form action="{{ path('member_private_group_remove_member') }}" method="post">
                                    <input type="hidden" name="privateGroupId" value="{{ privateGroup.private_group_id }}">
                                    <input class="btn btn-warning btn-sm" type="submit" value="Supprimer un membre dans ce groupe">
                                </form>
                                
                                <form action="{{ path('member_private_group_remove') }}" method="post">
                                    <input type="hidden" name="privateGroupId" value="{{ privateGroup.private_group_id }}">
                                    <input class="btn btn-danger btn-sm" type="submit" value="Supprimer ce groupe">
                                </form>
                                
                            {% endif %}
                          {% else %}
                            <span>({{ privateGroup.join_status }})</span>
                            {% if privateGroup.join_status == "INVITED" %}
                              <form action="{{ path('member_private_group_accept_invite') }}" method="post">
                                <input type="hidden" name="privateGroupId" value="{{ privateGroup.private_group_id }}">
                                <input type="hidden" name="memberId" value="{{ app.user.id }}">
                                <input class="btn btn-success btn-sm" type="submit" value="Accepter l'invitation dans ce groupe">
                              </form>
                              <form action="{{ path('member_private_group_remove_member') }}" method="post">
                                <input type="hidden" name="privateGroupId" value="{{ privateGroup.private_group_id }}">
                                <input type="hidden" name="memberId" value="{{ app.user.id }}">
                                <input class="btn btn-warning btn-sm" type="submit" value="Refuser l'invitation dans ce groupe">
                              </form>
                            {% elseif privateGroup.join_status == "JOIN" %}
                              <form action="{{ path('member_private_group_remove_member') }}" method="post">
                                <input type="hidden" name="privateGroupId" value="{{ privateGroup.private_group_id }}">
                                <input type="hidden" name="memberId" value="{{ app.user.id }}">
                                <input class="btn btn-warning btn-sm" type="submit" value="Annuler la demande à rejoindre ce groupe">
                              </form>
                            {% endif %}
                          {% endif %}
                      </div>
                  {% endfor %}
              {% else %}
                  <span>No group register</span>
              {% endif %}
              <a class="btn btn-primary btn-sm" href="{{ path('member_private_group_create') }}">Créer un nouveau Groupe</a>
              <a class="btn btn-success btn-sm" href="{{ path('member_private_group_join') }}">Demander à rejoindre un group</a>
            </div>
          </div>

      <div class="card">
        <div class="card-header" id="headingTwo">
          <h5 class="mb-0">
            <button class="btn btn-link collapsed" data-toggle="collapse" data-target="#collapseTwo" aria-expanded="false"
              aria-controls="collapseTwo">
              Options
            </button>
          </h5>
        </div>
        <div id="collapseTwo" class="collapse" aria-labelledby="headingTwo" data-parent="#accordion">
          <div class="card-body">
            Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon
            officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3
            wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et.
            Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan
            excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt
            you probably haven't heard of them accusamus labore sustainable VHS.
          </div>
        </div>
      </div>
      <div class="card">
        <div class="card-header" id="headingThree">
          <h5 class="mb-0">
            <button class="btn btn-link collapsed" data-toggle="collapse" data-target="#collapseThree" aria-expanded="false"
              aria-controls="collapseThree">
              Notifications
            </button>
          </h5>
        </div>
        <div id="collapseThree" class="collapse" aria-labelledby="headingThree" data-parent="#accordion">
          <div class="card-body">

            <div class="row">
              <!-- div to display the generated Instance ID token -->
              <!-- div to display the UI to allow the request for permission to
        notify the user. This is shown if the app has not yet been
        granted permission to notify. -->
              <h4>firebase cloud messaging</h4>
              <div id="token"></div>
              <div id="token_div" style="display: none;">
                <button class="btn btn-warning" onclick="deleteToken()">Delete</button>
              </div>
              <div id="permission_div" style="display: none;">
                <h4>Notifications</h4>
                <p id="token"></p>
                <button class="btn btn-primary" onclick="requestPermission()">Envoyez-moi des notifications!</button>
              </div>
            </div>
            <div class="row">
              <h4 class="col-sm-12">Liste des notifications</h4>
              <button class="btn btn-primary" onclick="clearMessages()">effacer les notifications</button>

              <!-- div to display messages received by this app. -->
              <div class="col-sm-12" id="messages"></div>
            </div>

          </div>
        </div>
      </div>
    </div>
  </div>
</div>


<div class="row">
  <div class="col-sm-4 mt-3">
    <a class="btn btn-primary btn-sm" href="{{ path('new-info') }}"><button class="btn" title="Publier"><i class="fa fa-plus"></i></button></a>
  </div>
  <div class="col-sm-4 mt-3">
    <h6>Vos dernières infos publiées</h6>
  </div>
  <div class="col-sm-4 mt-3">
  </div>
  <div class="col-sm-12 mt-3">
    <table class="table table-striped">
      {% for info in tabInfo|reverse %}
      <tr>
        <td>
          <i class="fas fa-{{ info.icon }}"></i> {{ info.publicationDate|date('H:i d/m/Y') }}
          <h6><a href="{{ url('info-public', { 'id' : info.id }) }}">{{ info.title }}</a></td>
        </h6>
        <td>
          <a class="btn btn-primary btn-sm" href="{{ path('member-info-edit', {'id': info.id}) }}"><i class="far fa-edit"></i></a>
        </td>
        <td>
          {{ include('member_zone/_delete_form.html.twig', {'button_label': 'X'}) }}
        </td>
      </tr>
      {% endfor %}
    </table>
  </div>
</div>

</div>
{% endblock %}


{% block javascripts %}
<script>
  // FORCER LE HTTPS
  if ((window.location.protocol != "https:") && (location.hostname != "localhost")) {
    location.href = 'https:' + window.location.href.substring(window.location.protocol.length);
  }
</script>

<script>
  var urlServer = '{{ path('firebase_server')}}';
  var userId = '{{ app.user.id }}';
</script>

<!-- Firebase App is always required and must be first -->
<script src="https://www.gstatic.com/firebasejs/5.4.1/firebase-app.js"></script>

<!-- Add additional services that you want to use -->
<script src="https://www.gstatic.com/firebasejs/5.4.1/firebase-auth.js"></script>
<script src="https://www.gstatic.com/firebasejs/5.4.1/firebase-database.js"></script>
<script src="https://www.gstatic.com/firebasejs/5.4.1/firebase-firestore.js"></script>
<script src="https://www.gstatic.com/firebasejs/5.4.1/firebase-messaging.js"></script>
<script src="https://www.gstatic.com/firebasejs/5.4.1/firebase-functions.js"></script>

<!-- Comment out (or don't include) services that you don't want to use -->
<!-- <script src="https://www.gstatic.com/firebasejs/5.4.1/firebase-storage.js"></script> -->

<script>
  var config = {
    apiKey: "AIzaSyCBpt2bXzNFQGlC-8twVIPBj3ZuitCbks8",
    authDomain: "code4marseille-v1.firebaseapp.com",
    databaseURL: "https://code4marseille-v1.firebaseio.com",
    projectId: "code4marseille-v1",
    storageBucket: "code4marseille-v1.appspot.com",
    messagingSenderId: "714773471916"
  };
  firebase.initializeApp(config);
</script>

<script>
  // [START get_messaging_object]
  // Retrieve Firebase Messaging object.
  const messaging = firebase.messaging();
  // [END get_messaging_object]
  // [START set_public_vapid_key]
  // Add the public key generated from the console here.
  messaging.usePublicVapidKey('BBWdkJZd8n7XmqiT_rIQXechBtnGg3OrC1eRRZvjqSh4gmZJmzKkZPyfMjf4QB5asVZlFvICSkNWw2ei5GSJ0Io');
  // [END set_public_vapid_key]

  // IDs of divs that display Instance ID token UI or request permission UI.
  const tokenDivId = 'token_div';
  const permissionDivId = 'permission_div';

  // [START refresh_token]
  // Callback fired if Instance ID token is updated.
  messaging.onTokenRefresh(function () {
    messaging.getToken().then(function (refreshedToken) {
      console.log('Token refreshed.');
      // Indicate that the new Instance ID token has not yet been sent to the
      // app server.
      setTokenSentToServer(false);
      // Send Instance ID token to app server.
      sendTokenToServer(refreshedToken);
      // [START_EXCLUDE]
      // Display new Instance ID token and clear UI of all previous messages.
      resetUI();
      // [END_EXCLUDE]
    }).catch(function (err) {
      console.log('Unable to retrieve refreshed token ', err);
      showToken('Unable to retrieve refreshed token ', err);
    });
  });
  // [END refresh_token]

  // [START receive_message]
  // Handle incoming messages. Called when:
  // - a message is received while the app has focus
  // - the user clicks on an app notification created by a service worker
  //   `messaging.setBackgroundMessageHandler` handler.
  messaging.onMessage(function (payload) {
    console.log('Message received. ', payload);
    // [START_EXCLUDE]
    // Update the UI to include the received message.
    appendMessage(payload);
    // [END_EXCLUDE]
  });
  // [END receive_message]

  function resetUI() {
    clearMessages();
    showToken('loading...');
    // [START get_token]
    // Get Instance ID token. Initially this makes a network call, once retrieved
    // subsequent calls to getToken will return from cache.
    messaging.getToken().then(function (currentToken) {
      if (currentToken) {
        sendTokenToServer(currentToken);
        updateUIForPushEnabled(currentToken);
      } else {
        // Show permission request.
        console.log('No Instance ID token available. Request permission to generate one.');
        // Show permission UI.
        updateUIForPushPermissionRequired();
        setTokenSentToServer(false);
      }
    }).catch(function (err) {
      console.log('An error occurred while retrieving token. ', err);
      showToken('Error retrieving Instance ID token. ', err);
      setTokenSentToServer(false);
    });
    // [END get_token]
  }


  function showToken(currentToken) {
    // Show token in console and UI.
    var tokenElement = document.querySelector('#token');
    tokenElement.textContent = currentToken;
  }

  // Send the Instance ID token your application server, so that it can:
  // - send messages back to this app
  // - subscribe/unsubscribe the token from topics
  function sendTokenToServer(currentToken) {
    if (!isTokenSentToServer()) {
      console.log('Sending token to server...');
      // TODO(developer): Send the current token to your server.
      var formData = new FormData;
      formData.append("userId", userId);
      formData.append("token", currentToken);
      fetch(urlServer, {
        method: 'POST',
        body: formData
      });
      setTokenSentToServer(true);
    } else {
      console.log('Token already sent to server so won\'t send it again ' +
        'unless it changes');
    }

  }

  function isTokenSentToServer() {
    return window.localStorage.getItem('sentToServer') === '1';
  }

  function setTokenSentToServer(sent) {
    window.localStorage.setItem('sentToServer', sent ? '1' : '0');
  }

  function showHideDiv(divId, show) {
    const div = document.querySelector('#' + divId);
    if (show) {
      div.style = 'display: visible';
    } else {
      div.style = 'display: none';
    }
  }

  function requestPermission() {
    console.log('Requesting permission...');
    // [START request_permission]
    messaging.requestPermission().then(function () {
      console.log('Notification permission granted.');
      // TODO(developer): Retrieve an Instance ID token for use with FCM.
      // [START_EXCLUDE]
      // In many cases once an app has been granted notification permission, it
      // should update its UI reflecting this.
      resetUI();
      // [END_EXCLUDE]
    }).catch(function (err) {
      console.log('Unable to get permission to notify.', err);
    });
    // [END request_permission]
  }

  function deleteToken() {
    // Delete Instance ID token.
    // [START delete_token]
    messaging.getToken().then(function (currentToken) {
      messaging.deleteToken(currentToken).then(function () {
        console.log('Token deleted.');
        setTokenSentToServer(false);
        // [START_EXCLUDE]
        // Once token is deleted update UI.
        resetUI();
        // [END_EXCLUDE]
      }).catch(function (err) {
        console.log('Unable to delete token. ', err);
      });
      // [END delete_token]
    }).catch(function (err) {
      console.log('Error retrieving Instance ID token. ', err);
      showToken('Error retrieving Instance ID token. ', err);
    });

  }

  // Add a message to the messages element.
  function appendMessage(payload) {
    const messagesElement = document.querySelector('#messages');
    const dataHeaderELement = document.createElement('h5');
    const dataElement = document.createElement('pre');
    dataElement.style = 'overflow-x:hidden;';
    dataHeaderELement.textContent = 'Received message:';
    dataElement.textContent = JSON.stringify(payload, null, 2);
    messagesElement.appendChild(dataHeaderELement);
    messagesElement.appendChild(dataElement);
  }

  // Clear the messages element of all children.
  function clearMessages() {
    const messagesElement = document.querySelector('#messages');
    while (messagesElement.hasChildNodes()) {
      messagesElement.removeChild(messagesElement.lastChild);
    }
  }

  function updateUIForPushEnabled(currentToken) {
    showHideDiv(tokenDivId, true);
    showHideDiv(permissionDivId, false);
    showToken(currentToken);
  }

  function updateUIForPushPermissionRequired() {
    showHideDiv(tokenDivId, false);
    showHideDiv(permissionDivId, true);
  }

  resetUI();
</script>
{% endblock %}

{% block stylesheets %}
<style>
  .fa-question {
    color: red;
  }
</style>
{% endblock %}